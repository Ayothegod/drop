generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  fullname          String
  email             String
  emailVerified     Boolean             @default(false)
  password          String?
  image             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  sessions          Session[]
  // profile Profile?
  EmailVerification EmailVerification[]
  PasswordReset     PasswordReset?
  store             Store?
  products          Product[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_token")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String // hashed token
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id       String    @id @default(cuid())
  name     String    @unique
  logo     String
  bio      String
  // relationships
  products Product[]
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String   @id @default(cuid())
  title           String
  description     String
  price           Float
  fileUrl         String
  previewImageUrl String
  category        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isPublished     Boolean  @default(false)
  // relationships
  tags            Tag[]
  storeId         String
  store           Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int     @id @default(autoincrement())
  tag       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
